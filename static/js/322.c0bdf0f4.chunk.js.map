{"version":3,"file":"static/js/322.c0bdf0f4.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { selectContactsItems } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContactsItems);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const createContact = e => {\n    e.preventDefault();\n    if (\n      contacts.find(contact => {\n        return contact.name === name.trim();\n      })\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const newContact = {\n      name: name.trim(),\n      number: number.trim(),\n      id: nanoid(),\n    };\n\n    setName('');\n    setNumber('');\n\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <>\n      <form className={css.form} onSubmit={createContact}>\n        <label className={css.label} htmlFor=\"name\">\n          {' '}\n          Name\n          <input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <label className={css.label} htmlFor=\"number\">\n          {' '}\n          Number\n          <input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n      <hr className={css.hr} />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"delete\":\"ContactList_delete__dvPUy\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"delete\":\"ContactListItem_delete__7rCtl\",\"buttonwrapper\":\"ContactListItem_buttonwrapper__hYCFN\"};","import React, { useState } from 'react';\nimport css from './ContactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/operations';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [name, setName] = useState(contact.name);\n  const [phone, setPhone] = useState(contact.number);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'phone':\n        setPhone(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleEditMode = () => {\n    setIsEditMode(prevState => !prevState);\n\n    if (isEditMode) {\n      const editedContact = {\n        name: name.trim(),\n        number: phone.trim(),\n        id: contact.id,\n      };\n      dispatch(editContact(editedContact));\n    }\n  };\n\n  return (\n    <li className={css.item}>\n      {isEditMode ? (\n        <div>\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n          <input\n            type=\"text\"\n            name=\"phone\"\n            value={phone}\n            onChange={handleChange}\n          />\n        </div>\n      ) : (\n        <span>{`${contact.name}: ${contact.number}`}</span>\n      )}\n      <div className={css.buttonwrapper}>\n        <button className={css.delete} type=\"button\" onClick={handleEditMode}>\n          {isEditMode ? 'Save' : 'Edit'}\n        </button>\n        <button\n          className={css.delete}\n          type=\"button\"\n          onClick={() => dispatch(deleteContact(contact.id))}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.list}>\n      {contacts.map(contact => {\n        return <ContactListItem contact={contact} key={contact.id} />;\n      })}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { selectFilterValue } from 'redux/selectors';\nimport { setFilterValue } from 'redux/filterSlice';\n\nexport default function Filter() {\n  const value = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    dispatch(setFilterValue(e.target.value))\n  }\n\n\n  return (\n    <div>\n      <label className={css.label}>\n        {' '}\n        Find contacts by name:\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"filter\"\n          title=\"Enter first letters or numbers\"\n          placeholder='Enter first letters'\n          value={value}\n          onChange={handleChange}\n        />\n      </label>\n    </div>\n  );\n}\n\n\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React from 'react';\nimport { Audio } from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { selectUserError, selectUserIsLoading } from 'redux/selectors';\n\nconst ContactsPage = () => {\n    const error = useSelector(selectUserError);\n    const isLoading = useSelector(selectUserIsLoading);\n  return (\n    <>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {error !== null && <p>Oops, an error has occurred...</p>}\n      {isLoading && (\n        <Audio height=\"80\" width=\"80\" color=\"grey\" ariaLabel=\"loading\" />\n      )}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","contacts","useSelector","selectContactsItems","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","e","target","value","className","css","onSubmit","preventDefault","find","contact","trim","alert","newContact","addContact","htmlFor","type","pattern","title","onChange","required","ContactListItem","isEditMode","setIsEditMode","phone","setPhone","onClick","prevState","editedContact","editContact","deleteContact","ContactList","selectFilteredContacts","useEffect","fetchContacts","map","Filter","selectFilterValue","placeholder","setFilterValue","error","selectUserError","isLoading","selectUserIsLoading","height","width","color","ariaLabel"],"sourceRoot":""}